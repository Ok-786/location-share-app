{"version":3,"sources":["pages/UpdatePlace.js","views/Button.js","views/ErrorModal.js","components/Modal.js","util/validators.js","views/Input.js","views/form-hook.js"],"names":["UpdatePlace","auth","useContext","AuthContext","history","useHistory","placeId","useParams","useState","loadedPlace","setLoadedPlace","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","a","process","responseData","place","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","token","push","userId","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled","Button","props","href","size","inverse","danger","children","to","exact","onClick","ErrorModal","onCancel","header","show","footer","ModalOverLay","content","style","headerClass","contentClass","footerClass","ReactDOM","createPortal","document","getElementById","Modal","in","mountOnEnter","unmountOnExit","timeout","classNames","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","val","VALIDATOR_EMAIL","validate","validator","trim","length","test","inputReducer","state","action","isTouched","Input","useReducer","inputState","dispatch","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity"],"mappings":"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","file":"static/js/7.a63a84cf.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../views/auth-context';\nimport '../css/NewPlace.css';\nimport Input from '../views/Input';\nimport Button from '../views/Button';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../util/validators';\nimport { useForm } from '../views/form-hook';\nimport { Card } from '@mui/material';\nimport { useHttpClient } from '../views/http-hook';\nimport ErrorModal from '../views/ErrorModal';\nimport LoadingSpinner from '../views/LoadingSpinner';\n\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  const placeId = useParams().placeId;\n  const [loadedPlace, setLoadedPlace] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: '',\n        isValid: false\n      },\n      description: {\n        value: '',\n        isValid: false\n      }\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true\n            }\n          },\n          true\n        );\n      } catch (err) { }\n    }\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    try{\n      await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n      'PATCH',\n      JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value,\n      }), \n      {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${auth.token}`\n        \n      }\n    );\n    history.push(`/${auth.userId}/places`);\n  } catch(err) { }\n  };\n\n  if (!loadedPlace) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner />\n      </div>\n    )\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find a place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (<form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type=\"text\"\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n          initialValue={loadedPlace.title}\n          initialValid={true}\n        />\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (min. 5 characters).\"\n          onInput={inputHandler}\n          initialValue={loadedPlace.description}\n          initialValid={true}\n        />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          UPDATE PLACE\n        </Button>\n      </form>)}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport '../css/Button.css';\n\nconst Button = props => {\n  if (props.href) {\n    return (\n      <a\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n        href={props.href}\n      >\n        {props.children}\n      </a>\n    );\n  }\n  if (props.to) {\n    return (\n      <Link\n        to={props.to}\n        exact={props.exact}\n        className={`button button--${props.size || 'default'} ${props.inverse &&\n          'button--inverse'} ${props.danger && 'button--danger'}`}\n      >\n        {props.children}\n      </Link>\n    );\n  }\n  return (\n    <button\n      className={`button button--${props.size || 'default'} ${props.inverse &&\n        'button--inverse'} ${props.danger && 'button--danger'}`}\n      type={props.type}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from 'react';\n\nimport Modal from '../components/Modal';\nimport Button from './Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from 'react';\r\nimport '../css/Modal.css';\r\nimport ReactDOM from 'react-dom';\r\nimport {CSSTransition} from 'react-transition-group';\r\nimport Backdrop from '../views/Backdrop';\r\n\r\nconst ModalOverLay = props => {\r\n    const content = (\r\n        <div className={`modal ${props.className}`} style={props.style}>\r\n            <header className={`modal__header ${props.headerClass}`}>\r\n                <h2>{props.header}</h2>\r\n            </header>\r\n            <form onSubmit={props.onSubmit? props.onSubmit : (event)=>event.preventDefault()}>\r\n                <div className={`modal__content ${props.contentClass}`}>\r\n                    {props.children}\r\n                </div>\r\n                <footer className={`modal__footer ${props.footerClass}`}>\r\n                    {props.footer}\r\n                </footer>\r\n            </form>\r\n        </div>\r\n    );\r\n    return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\r\n}\r\n\r\nexport default function Modal(props) {\r\n    return (\r\n        <React.Fragment>\r\n            {props.show && <Backdrop onClick={props.onCancel} />}\r\n            <CSSTransition\r\n                in={props.show}\r\n                mountOnEnter\r\n                unmountOnExit\r\n                timeout={200}\r\n                classNames=\"modal\"\r\n            >\r\n                <ModalOverLay {...props} />\r\n            </CSSTransition>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import React, { useReducer, useEffect } from 'react';\r\nimport '../css/Input.css';\r\nimport { validate } from '../util/validators';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'CHANGE':\r\n        return {\r\n          ...state,\r\n          value: action.val,\r\n          isValid: validate(action.val, action.validators)\r\n        };\r\n      case 'TOUCH': {\r\n        return {\r\n          ...state,\r\n          isTouched: true\r\n        }\r\n      }\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  const Input = props => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n      value: props.initialValue || '',\r\n      isTouched: false,\r\n      isValid: props.initialValid || false\r\n    });\r\n  \r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n  \r\n    useEffect(() => {\r\n      onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n  \r\n    const changeHandler = event => {\r\n      dispatch({\r\n        type: 'CHANGE',\r\n        val: event.target.value,\r\n        validators: props.validators\r\n      });\r\n    };\r\n  \r\n    const touchHandler = () => {\r\n      dispatch({\r\n        type: 'TOUCH'\r\n      });\r\n    };\r\n  \r\n    const element =\r\n      props.element === 'input' ? (\r\n        <input\r\n          id={props.id}\r\n          type={props.type}\r\n          placeholder={props.placeholder}\r\n          onChange={changeHandler}\r\n          onBlur={touchHandler}\r\n          value={inputState.value}\r\n        />\r\n      ) : (\r\n        <textarea\r\n          id={props.id}\r\n          rows={props.rows || 3}\r\n          onChange={changeHandler}\r\n          onBlur={touchHandler}\r\n          value={inputState.value}\r\n        />\r\n      );\r\n  \r\n    return (\r\n      <div\r\n        className={`form-control ${!inputState.isValid && inputState.isTouched &&\r\n          'form-control--invalid'}`}\r\n      >\r\n        <label htmlFor={props.id}>{props.label}</label>\r\n        {element}\r\n        {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Input;\r\n  ","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n      for (const inputId in state.inputs) {\n        if(!state.inputs[inputId]) {\n          continue;\n        }\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n      return {\n        ...state,\n        inputs: {\n          ...state.inputs,\n          [action.inputId]: { value: action.value, isValid: action.isValid }\n        },\n        isValid: formIsValid\n      };\n    case 'SET_DATA':\n      return {\n        inputs: action.inputs,\n        isValid: action.formIsValid\n      };\n    default:\n      return state;\n  }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: initialInputs,\n    isValid: initialFormValidity\n  });\n\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n\n  const setFormData = useCallback((inputData, formValidity) => {\n    dispatch({\n      type: 'SET_DATA',\n      inputs: inputData,\n      formIsValid: formValidity\n    });\n  }, []);\n\n  return [formState, inputHandler, setFormData];\n};"],"sourceRoot":""}